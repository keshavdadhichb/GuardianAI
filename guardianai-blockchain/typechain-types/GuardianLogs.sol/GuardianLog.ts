/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GuardianLogInterface extends Interface {
  getFunction(
    nameOrSignature: "evidenceLogs" | "logEvidence"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "EvidenceLogged"): EventFragment;

  encodeFunctionData(
    functionFragment: "evidenceLogs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logEvidence",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "evidenceLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logEvidence",
    data: BytesLike
  ): Result;
}

export namespace EvidenceLoggedEvent {
  export type InputTuple = [
    id: BigNumberish,
    timestamp: BigNumberish,
    evidenceHash: string
  ];
  export type OutputTuple = [
    id: bigint,
    timestamp: bigint,
    evidenceHash: string
  ];
  export interface OutputObject {
    id: bigint;
    timestamp: bigint;
    evidenceHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GuardianLog extends BaseContract {
  connect(runner?: ContractRunner | null): GuardianLog;
  waitForDeployment(): Promise<this>;

  interface: GuardianLogInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  evidenceLogs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string] & {
        id: bigint;
        timestamp: bigint;
        evidenceHash: string;
        gpsCoordinates: string;
        loggedBy: string;
      }
    ],
    "view"
  >;

  logEvidence: TypedContractMethod<
    [_evidenceHash: string, _timestamp: BigNumberish, _gpsCoordinates: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "evidenceLogs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string] & {
        id: bigint;
        timestamp: bigint;
        evidenceHash: string;
        gpsCoordinates: string;
        loggedBy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "logEvidence"
  ): TypedContractMethod<
    [_evidenceHash: string, _timestamp: BigNumberish, _gpsCoordinates: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EvidenceLogged"
  ): TypedContractEvent<
    EvidenceLoggedEvent.InputTuple,
    EvidenceLoggedEvent.OutputTuple,
    EvidenceLoggedEvent.OutputObject
  >;

  filters: {
    "EvidenceLogged(uint256,uint256,string)": TypedContractEvent<
      EvidenceLoggedEvent.InputTuple,
      EvidenceLoggedEvent.OutputTuple,
      EvidenceLoggedEvent.OutputObject
    >;
    EvidenceLogged: TypedContractEvent<
      EvidenceLoggedEvent.InputTuple,
      EvidenceLoggedEvent.OutputTuple,
      EvidenceLoggedEvent.OutputObject
    >;
  };
}
